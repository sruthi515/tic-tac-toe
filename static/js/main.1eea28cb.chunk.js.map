{"version":3,"sources":["assets/close_x.svg","assets/close_xx.svg","assets/TicTacToe.svg","components/Welcome.js","actions/index.js","components/Square.js","components/Board.js","components/Dot.js","components/Game.js","components/Winner.js","components/Join.js","App.js","reducers/index.js","index.js"],"names":["module","exports","Welcome","e","preventDefault","this","props","startGame","history","push","className","onSubmit","submitHandler","bind","type","placeholder","value","playerA","onChange","setUserNames","target","playerB","required","Component","connect","state","player_info","players","name","dispatch","withRouter","Square","onClick","Board","i","squares","renderSquare","Dot","player","Game","gameHistory","slice","stepNumber","length","calculateWinner","winnerSign","xIsNext","OnStepChange","status","playerOneStatus","playerTwoStatus","winner","current","isDraw","gameCompleted","setWinnerDetails","resetGameHistory","updateRoundStatus","resetRoundHistory","src","x_icon","alt","handleButtonClick","lines","a","b","c","game_info","isGameDraw","gameWinner","xx_icon","Join","logo","exact","path","App","playersInitialState","roundNumber","totalRounds","noOfWins","Array","fill","gameInitialState","playerReducer","combineReducers","action","newState","noOfWinsForA","filter","Boolean","noOfWinsForB","current_state","winner_state","concat","store","createStore","uploadReducer","render","document","getElementById"],"mappings":"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","file":"static/js/main.1eea28cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close_x.ef82e42c.svg\";","module.exports = __webpack_public_path__ + \"static/media/close_xx.0fb4c71f.svg\";","module.exports = __webpack_public_path__ + \"static/media/TicTacToe.acc667d5.svg\";","import React, { Component }  from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport { setUserNames, startGame } from '../actions';\nimport '../App.css';\n\nclass Welcome extends Component {\n\n    submitHandler(e) {\n        e.preventDefault();\n        this.props.startGame();\n        this.props.history.push(\"game\");\n    }\n\n    render(){\n        return (\n            <div className='welcome-container ml-28'>\n                <div className='welcome-content'>\n                    <form onSubmit={this.submitHandler.bind(this)}>\n                        <h3>\n                            <span \n                                className='welcome-text'>\n                                Welcome to  &nbsp; \n                            </span>\n                            <span \n                                className='tic-text'>\n                                TIC TAC TOE\n                            </span>\n                        </h3>\n                        <label \n                            className='form-label'>\n                            PLAYER 1\n                        </label>\n                        <input \n                            type='text' \n                            placeholder='Enter Name' \n                            className='form-input'\n                            value={this.props.playerA}\n                            onChange={e => this.props.setUserNames(e.target.value, this.props.playerB)}\n                            required\n                        />\n                        <label className='form-label'>PLAYER 2</label>\n                        <input \n                            type='text' \n                            placeholder='Enter Name' \n                            className='form-input'\n                            value={this.props.playerB}\n                            onChange={e => this.props.setUserNames(this.props.playerA, e.target.value)}\n                            required\n                        />\n                        <button \n                            className='continue'\n                            type='submit'>\n                            Continue\n                        </button>\n                    </form>\n                </div>\n            </div>\n        )\n    };\n  }\n\nconst mapStateToProps = state => {\n    return {\n        playerA:state.player_info.players.playerA.name,\n        playerB:state.player_info.players.playerB.name\n    }\n}\n\nconst mapDispatchToprops = (dispatch) => {\n    return{\n        setUserNames:(playerA, playerB) => { dispatch(setUserNames(playerA, playerB)) },\n        startGame:() => { dispatch(startGame()) }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToprops)(withRouter(Welcome));","\nexport const START_GAME = 'START_GAME'\nexport const SET_USER_NAMES = 'SET_USER_NAMES'\nexport const ON_STEP_CHANGE = 'ON_STEP_CHANGE'\nexport const UPDATE_ROUND_STATUS = 'UPDATE_ROUND_STATUS'\nexport const RESET_ROUND_HISTORY = 'RESET_ROUND_HISTORY'\nexport const RESET_GAME_HISTORY = 'RESET_GAME_HISTORY'\nexport const SET_WINNER_DETAILS = 'SET_WINNER_DETAILS'\n\nexport function startGame(){\n   return {\n      type: START_GAME\n   }\n}\n\nexport function setUserNames(playerA, playerB) {\n   return {\n      type: SET_USER_NAMES,\n      playerA,\n      playerB\n   }\n}\n\nexport function OnStepChange(squares) {\n   return {\n      type: ON_STEP_CHANGE,\n      squares\n   };\n}\n\nexport function updateRoundStatus(isDraw, winner){\n   return{\n      type:UPDATE_ROUND_STATUS,\n      isDraw,\n      winner\n   }\n}\n\nexport function resetRoundHistory(){\n   return{\n      type:RESET_ROUND_HISTORY\n   }\n}\n\nexport function resetGameHistory(){\n   return{\n      type:RESET_GAME_HISTORY\n   }\n}\n\nexport function setWinnerDetails(){\n   return{\n      type:SET_WINNER_DETAILS\n   }\n}\n","import React from 'react';\n\nexport default function Square ( props ){\n    return (\n        <button className='grid-item' onClick={ props.onClick }>\n            { props.value }\n        </button>\n    );\n  }\n","import React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n    renderSquare(i){\n        return <Square value={ this.props.squares[i] } \n        onClick={ () => this.props.onClick(i) }/>\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"grid-row\">\n                    { this.renderSquare(0) }\n                    { this.renderSquare(1) }\n                    { this.renderSquare(2) }\n                </div>\n                <div className=\"grid-row\">\n                    { this.renderSquare(3) }\n                    { this.renderSquare(4) }\n                    { this.renderSquare(5) }\n                </div>\n                <div className=\"grid-row\">\n                    { this.renderSquare(6) }\n                    { this.renderSquare(7) }\n                    { this.renderSquare(8) }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\n\nexport default function Dot (props){\n    return (\n        <div>\n            <span className={ props.player[0] ? 'dot' : 'dot-grey' }></span>\n            <span className={ props.player[1] ? 'dot' : 'dot-grey' }></span>\n            <span className={ props.player[2] ? 'dot' : 'dot-grey' }></span>\n            <span className={ props.player[3] ? 'dot' : 'dot-grey' }></span>\n            <span className={ props.player[4] ? 'dot' : 'dot-grey' }></span>\n            <span className={ props.player[5] ? 'dot' : 'dot-grey' }></span>\n        </div>\n\n    );\n  }\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport Board from './Board';\nimport Dot from './Dot';\nimport x_icon from '../assets/close_x.svg';\nimport { OnStepChange, \n         updateRoundStatus, \n         resetGameHistory, \n         resetRoundHistory, \n         setWinnerDetails \n        } from '../actions';\n\nclass Game extends Component {\n\n  handleButtonClick(i){\n    const gameHistory = this.props.gameHistory.slice(0,this.props.stepNumber+1);\n    const current = gameHistory[gameHistory.length-1];\n    const squares = current.squares.slice();\n    const winner = calculateWinner(squares);\n    if(winner.winnerSign || squares[i]){\n      return;\n    }\n    squares[i] = this.props.xIsNext ? \"X\" : \"O\";\n    this.props.OnStepChange(squares);\n  }\n\n  render() {\n    const gameHistory = this.props.gameHistory;\n    const current = gameHistory[this.props.stepNumber];\n    const {isDraw, winnerSign} = calculateWinner(current.squares);\n    let status,playerOneStatus,playerTwoStatus,winner;\n    if(this.props.gameCompleted){\n      this.props.setWinnerDetails();\n      this.props.history.push(\"/winner\");\n      this.props.resetGameHistory();\n    }\n    if( isDraw || winnerSign ){\n      if ( !isDraw){\n        if ( winnerSign === 'X' ){\n          playerOneStatus = 'Winner'\n          winner = 'playerA'\n        } \n        else\n        {\n          playerTwoStatus = 'Winner'\n          winner = 'playerB'\n        }\n      }\n      this.props.updateRoundStatus(isDraw, winner);\n      this.props.resetRoundHistory();\n    }\n    else{\n      status = \"Next player is \"+ ( this.props.xIsNext ? \"X\" : \"O\");\n      playerOneStatus = ( this.props.xIsNext ? \"Your Turn\" : \"\"  );\n      playerTwoStatus = ( !this.props.xIsNext ? \"Your Turn\" : \"\" );\n    }\n\n    return (\n      <div className='container'>\n        <div className='player-1-status'>\n          <div className='player-status'>\n            { playerOneStatus }\n          </div>\n          <div className='player-1-container'>\n            <p className='text-orange'>\n              player 1\n            </p>\n            <p>\n              { this.props.playerA.name }\n            </p>\n            <p><img src={ x_icon } alt='img'/></p>\n          </div>\n          <Dot player ={ this.props['playerA'][\"noOfWins\"] }/>\n          <div className='game-info'>\n            {status}\n          </div>\n        </div>\n        <div className='welcome-container'>\n          <div className='game-container'>\n            <Board onClick={ (i)=>this.handleButtonClick(i) } squares={ current.squares }/>\n          </div>\n        </div>\n        <div className='player-2-status'>\n          <div className='player-status'>\n            { playerTwoStatus }\n          </div>\n          <div className='player-2-container'>\n            <p className='text-orange'>\n              player 2\n            </p>\n            <p>\n              { this.props.playerB.name }\n            </p>\n            <p className='circle_x'>O</p>\n          </div>\n          <Dot player ={ this.props['playerB'][\"noOfWins\"] }/>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares){\n  const lines= [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6]\n  ]\n  for (var i = 0; i < lines.length; i++) {\n    const [a,b,c] = lines[i];\n    if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]){\n      return { isDraw: false, winnerSign: squares[a]};\n    }\n  }\n  return {\n    isDraw: squares.length === lines.length,\n    winnerSign: null\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    gameHistory: state.game_info.gameHistory,\n    xIsNext:state.game_info.xIsNext,\n    stepNumber:state.game_info.stepNumber,\n    playerA:state.player_info.players.playerA,\n    playerB:state.player_info.players.playerB,\n    gameCompleted: state.player_info.gameCompleted,\n    isGameDraw: state.player_info.isGameDraw,\n    gameWinner: state.player_info.gameWinner\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    OnStepChange:(squares) => { dispatch(OnStepChange(squares)) },\n    updateRoundStatus:(isDraw,winner) => { dispatch(updateRoundStatus(isDraw,winner))},\n    resetRoundHistory:() => { dispatch(resetRoundHistory()) },\n    resetGameHistory:() => { dispatch(resetGameHistory()) },\n    setWinnerDetails: () => { dispatch(setWinnerDetails()) }\n  };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Game));\n","import React  from 'react';\nimport { connect } from 'react-redux';\nimport xx_icon from '../assets/close_xx.svg';\nimport '../App.css';\n\nexport function Winner (props){\n    return (\n        <div className='welcome-container ml-28'>\n            <div className='welcome-content'>\n                <h3>\n                    <span \n                        className='winner-text'>\n                        WINNER!\n                    </span>\n                </h3>\n                <div className='winner border-orange'>\n                    <p className='text-orange'>{ props.gameWinner === props.playerA ? \"PLAYER 1\" : \"PLAYER 2\" } </p>\n                    <p className='winner-name'>{ props.gameWinner }</p>\n                    <p className='winner-symbol'> { props.gameWinner === props.playerA ? <img src={xx_icon} alt='img'/> : \"O\" } </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n      gameWinner: state.player_info.gameWinner,\n      playerA:state.player_info.players.playerA.name,\n      playerB:state.player_info.players.playerB.name,\n\n    }\n}\n\nexport default connect(mapStateToProps)(Winner);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Welcome from './Welcome';\nimport Game from './Game';\nimport Winner from './Winner';\nimport logo from '../assets/TicTacToe.svg';\n\nclass Join extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Switch>\n            <Route exact path=\"/\"><Welcome /></Route>\n            <Route path=\"/game\"><Game /></Route>\n            <Route exact path=\"/winner\"><Winner /></Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Join;","import React from 'react';\nimport Join from './components/Join';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Join/>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux'\nimport { START_GAME, \n        ON_STEP_CHANGE, \n        SET_USER_NAMES, \n        UPDATE_ROUND_STATUS, \n        RESET_ROUND_HISTORY, \n        RESET_GAME_HISTORY,\n        SET_WINNER_DETAILS \n    } from '../actions'\n\nlet playersInitialState = {\n    roundNumber: 0,\n    totalRounds: 6,\n    gameCompleted: false,\n    isGameDraw: false,\n    gameWinner: null,\n    players: {\n        playerA: {\n            name: '',\n            noOfWins: Array(6).fill(false)\n        },\n        playerB: {\n            name: '',\n            noOfWins: Array(6).fill(false)\n        }\n    }\n}\n\nfunction playerHandler(state = playersInitialState, action) {\n\n    switch (action.type) {\n        case UPDATE_ROUND_STATUS:\n            let gameCompleted = (state.roundNumber === state.totalRounds)\n            var newState = { ...state, roundNumber: state.roundNumber + 1, gameCompleted }\n            newState.players[action.winner][\"noOfWins\"][state.roundNumber - 1] = true\n            if (gameCompleted) {\n                let noOfWinsForA = newState.players.playerA.noOfWins.filter(Boolean).length\n                let noOfWinsForB = newState.players.playerB.noOfWins.filter(Boolean).length\n                let isGameDraw = noOfWinsForA === noOfWinsForB\n                let gameWinner = isGameDraw ? null : (noOfWinsForA > noOfWinsForB ? state.players.playerA.name : state.players.playerB.name)\n                newState = { ...newState, gameCompleted: true, isGameDraw, gameWinner }\n            }\n            return newState\n\n        case START_GAME:\n            return { ...state, roundNumber: state.roundNumber + 1 };\n\n        case SET_USER_NAMES:\n            let current_state = { ...state }\n            current_state.players.playerA.name = action.playerA\n            current_state.players.playerB.name = action.playerB\n            return current_state;\n\n        case RESET_GAME_HISTORY:\n            var newState = {\n                roundNumber: 0,\n                totalRounds: 6,\n                gameCompleted: false,\n                isGameDraw: false,\n                gameWinner: state.gameWinner,\n                players: {\n                    playerA: {\n                        name: '',\n                        noOfWins: Array(6).fill(false)\n                    },\n                    playerB: {\n                        name: '',\n                        noOfWins: Array(6).fill(false)\n                    }\n                }\n            }\n            newState.players.playerA.name = state.players.playerA.name\n            newState.players.playerB.name = state.players.playerB.name\n            return newState;\n        case  SET_WINNER_DETAILS:\n            let winner_state = { ...state }\n            winner_state.gameWinner = state.gameWinner\n            return winner_state;\n\n        default: return state;\n    }\n}\n\nlet gameInitialState = {\n    xIsNext: true,\n    stepNumber: 0,\n    gameHistory: [\n        { squares: Array(9).fill(null) }\n    ],\n}\nfunction gameHandler(state = gameInitialState, action) {\n    switch (action.type) {\n        case ON_STEP_CHANGE:\n            return {\n                xIsNext: !state.xIsNext,\n                gameHistory: state.gameHistory.concat({\n                    squares: action.squares\n                }),\n                stepNumber: state.gameHistory.length,\n            }\n\n        case RESET_ROUND_HISTORY:\n            let newState = { ...state, ...gameInitialState }\n            return newState;\n\n        default: return state;\n    }\n}\n\nconst playerReducer = combineReducers({\n    player_info: playerHandler,\n    game_info: gameHandler\n})\nexport default playerReducer;","\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport uploadReducer from './reducers';\nimport './index.css';\n\nlet store = createStore(uploadReducer);\n\nrender(\n  <Provider store = {store}>\n     <App />\n  </Provider>, document.getElementById('root'));\n"],"sourceRoot":""}